Documentation - Python Project - Vegan Products Store Software

Data structure for warehouse management:
- A dictionary of lists
- The key represents the name of the product
- The list represents, respectively: quantity, selling price, and purchase price

Tasks:

- Register new products, with name, quantity, selling price, and purchase price.
	- Method add_new_product
		- Adds a new product and checks if it is already in stock. If so, it adds the quantity.
		- Contains exception handling for invalid data for: product name, quantity, and purchase/selling prices

- List all current products.
	- Method show_all_current_product
		- Reads the dictionary and lists (warehouse) and prints the products currently in stock.

- Record the sales made.
	- Method record_a_sale
		- Uses a while loop that is repeated whenever the user decides to purchase more than one product. It creates a list that includes the name of the product and the quantity. Then it generates the total sales.
		- Contains exception handling for invalid data for: product name and quantity
		- Uses a for loop to calculate the total sales and show the products sold with the corresponding quantity
		- Extra: a print statement has been added to show the products currently in stock to help the user during the sale.

- Show gross and net profits.
	- Method calculate_profits
		- Uses a for loop that iterates through the sales list and calculates gross and net profits, showing them on the screen.

- Show a help menu with all available commands.
	- In the main function, there is a while loop that implements the proposed commands. For the "help" command, a print statement with all the available program options is provided.
	- If an invalid command is entered, the user is given the opportunity to try again.

Additional notes:

Constructor
It provides 3 main attributes: the dictionary containing the products, the list of total sales, and the list of current sales.

It invokes two functions to initialize the warehouse product list and the sales list. This is done to make the program consistent across multiple executions.

Function: initialize_sales_archive
It reads the sales register if it already exists.

Function: initialize_product_archive
It reads the csv containing the product list if it already exists; otherwise, it creates the csv file and inserts the first row of headers.

Moreover, it has been decided to use two lists for sales in order to manage both past and current sales during the program execution. This allows the user to view the sale they are currently making and to show the profits of all sales, not just the current one.